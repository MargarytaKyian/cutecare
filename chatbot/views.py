from django.shortcuts import render, redirect, get_object_or_404
from django.http import JsonResponse, HttpResponseNotFound, Http404
from django.contrib.auth.decorators import login_required
from django.views.decorators.http import require_POST
from django.utils import timezone
from .models import ChatSession, ChatMessage
from decouple import config
import google.generativeai as genai
import json


try:
    from main.models import Category, Product
    from django.db.models import Avg, Q, Value, FloatField
    from django.db.models.functions import Coalesce
except ImportError:
    print("–ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø: –ú–æ–¥–µ–ª—ñ Category —Ç–∞/–∞–±–æ Product –∑ –¥–æ–¥–∞—Ç–∫–∞ 'main' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —Ç–æ–≤–∞—Ä—ñ–≤ –±—É–¥—É—Ç—å –Ω–µ–º–æ–∂–ª–∏–≤—ñ.")
    class Category:
        @staticmethod
        def objects_filter(**kwargs): return Category
        def filter(**kwargs): return Category
        def exists(self): return False
    class Product:
        @staticmethod
        def objects_filter(**kwargs): return Product
        def filter(**kwargs): return Product
        def annotate(self, **kwargs): return self
        def order_by(self, *args): return []
        def exists(self): return False
        def get_absolute_url(self): return "#"
        category = type('Category', (), {'name': '–ù–µ–≤—ñ–¥–æ–º–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è'})()
        name = "–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–æ–≤–∞—Ä"
        sell_price = 0.00


try:
    from pets.models import Pet
except ImportError:
    class Pet:
        @staticmethod
        def objects_filter(**kwargs): return Pet
        def filter(**kwargs): return Pet
        def order_by(*args): return []
        def exists(self): return False
        def get_gender_display(self): return "–°—Ç–∞—Ç—å –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ (–ø–æ–º–∏–ª–∫–∞ –º–æ–¥–µ–ª—ñ)"
        def get_age_display(self): return "–í—ñ–∫ –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ (–ø–æ–º–∏–ª–∫–∞ –º–æ–¥–µ–ª—ñ)"
        def get_weight_display(self): return "–í–∞–≥–∞ –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ (–ø–æ–º–∏–ª–∫–∞ –º–æ–¥–µ–ª—ñ)"


# --- –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è Gemini API ---
GEMINI_API_KEY = config('GEMINI_API_KEY', default=None)
if GEMINI_API_KEY:
    genai.configure(api_key=GEMINI_API_KEY)

generation_config = {
    "temperature": 0.7,
    "top_p": 0.95,
    "top_k": 64,
    "max_output_tokens": 8192,
    "response_mime_type": "text/plain",
}
safety_settings = [
    {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
    {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
    {"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
    {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
]
SYSTEM_INSTRUCTION = """–¢–∏ –¥–æ–±—Ä–æ–∑–∏—á–ª–∏–≤–∏–π –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –Ω–∞ —ñ–º'—è \"PetBot\".
–¢–∏ –ø—Ä–∞—Ü—é—î—à –Ω–∞ —Å–∞–π—Ç—ñ \"CuteCare\".
–¢–≤–æ—è –º–µ—Ç–∞ - –¥–æ–ø–æ–º–∞–≥–∞—Ç–∏ –≤–ª–∞—Å–Ω–∏–∫–∞–º –¥–æ–º–∞—à–Ω—ñ—Ö —É–ª—é–±–ª–µ–Ω—Ü—ñ–≤.
–¢–∏ –Ω–∞–¥–∞—î—à –ø–µ—Ä–≤–∏–Ω–Ω—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é, –º–æ–∂–µ—à –∑–∞–ø–∏—Ç–∞—Ç–∏ –ø—Ä–æ –ø–æ—Ä–æ–¥—É, –≤—ñ–∫, —Å–∏–º–ø—Ç–æ–º–∏ —Ç–≤–∞—Ä–∏–Ω–∏.
–¢–∏ –º–æ–∂–µ—à —Ä–µ–∫–æ–º–µ–Ω–¥—É–≤–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—ñ –ø–æ—Ä–∞–¥–∏ —â–æ–¥–æ –¥–æ–≥–ª—è–¥—É, —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è.
–Ø–∫—â–æ —Å–∏—Ç—É–∞—Ü—ñ—è —Å–µ—Ä–π–æ–∑–Ω–∞ –∞–±–æ –ø–æ—Ç—Ä–µ–±—É—î –æ–≥–ª—è–¥—É, —Ç–∏ –∑–∞–≤–∂–¥–∏ –Ω–∞–ø–æ–ª—è–≥–∞—î—à –Ω–∞ –≤—ñ–∑–∏—Ç—ñ –¥–æ —Å–ø—Ä–∞–≤–∂–Ω—å–æ–≥–æ –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–∞.
–¢–∏ –ù–ï —Å—Ç–∞–≤–∏—à —Ç–æ—á–Ω–∏—Ö –¥—ñ–∞–≥–Ω–æ–∑—ñ–≤ —ñ –ù–ï –ø—Ä–∏–∑–Ω–∞—á–∞—î—à –ª—ñ–∫—É–≤–∞–Ω–Ω—è –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç–∞–º–∏.
–¢–∏ –º–æ–∂–µ—à —Ä–µ–∫–æ–º–µ–Ω–¥—É–≤–∞—Ç–∏ –∑–æ–æ—Ç–æ–≤–∞—Ä–∏ –∑ —Å–∞–π—Ç—É \"CuteCare\", —è–∫—â–æ —Ü–µ –¥–æ—Ä–µ—á–Ω–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π –∫–æ—Ä–º, –≤—ñ—Ç–∞–º—ñ–Ω–∏, –∑–∞—Å–æ–±–∏ –¥–ª—è –¥–æ–≥–ª—è–¥—É).
–°–ø—ñ–ª–∫—É–π—Å—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é. –ë—É–¥—å –≤–≤—ñ—á–ª–∏–≤–∏–º, —Ç—É—Ä–±–æ—Ç–ª–∏–≤–∏–º —Ç–∞ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–º.
–£–Ω–∏–∫–∞–π —Ñ—Ä–∞–∑ –Ω–∞ –∫—à—Ç–∞–ª—Ç "–Ø–∫ –º–æ–¥–µ–ª—å –®–Ü...". –ü–æ–≤–æ–¥—å—Å—è —è–∫ —Å–ø—Ä–∞–≤–∂–Ω—ñ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç.
"""


def get_gemini_model(user):
    if not GEMINI_API_KEY:
        return None

    user_name = user.first_name if user.first_name else user.username
    user_context_info = f"–¢–∏ —Å–ø—ñ–ª–∫—É—î—à—Å—è –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º –Ω–∞ —ñ–º'—è {user_name}."

    pets_context_info = "–û—Å—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –π–æ–≥–æ/—ó—ó —É–ª—é–±–ª–µ–Ω—Ü—ñ–≤, –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –Ω–∞ —Å–∞–π—Ç—ñ:\n"
    
    if hasattr(Pet, 'objects') and callable(getattr(Pet.objects, 'filter', None)):
        user_pets = Pet.objects.filter(owner=user).order_by('name')
        if user_pets.exists():
            for pet_instance in user_pets:
                pets_context_info += f"\nüêæ –ö–ª–∏—á–∫–∞: {pet_instance.name}\n"
                pets_context_info += f"   - –í–∏–¥: {pet_instance.species}\n"
                if pet_instance.breed:
                    pets_context_info += f"   - –ü–æ—Ä–æ–¥–∞: {pet_instance.breed}\n"
                else:
                    pets_context_info += f"   - –ü–æ—Ä–æ–¥–∞: –Ω–µ –≤–∫–∞–∑–∞–Ω–æ\n"
                pets_context_info += f"   - –í—ñ–∫: {pet_instance.get_age_display()}\n"
                pets_context_info += f"   - –í–∞–≥–∞: {pet_instance.get_weight_display()}\n"
                pets_context_info += f"   - –°—Ç–∞—Ç—å: {pet_instance.get_gender_display()}\n"
                if pet_instance.health_features:
                    pets_context_info += f"   - –û—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ –∑–¥–æ—Ä–æ–≤'—è —Ç–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä—É: {pet_instance.health_features}\n"
                else:
                    pets_context_info += f"   - –û—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ –∑–¥–æ—Ä–æ–≤'—è —Ç–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä—É: –Ω–µ –≤–∫–∞–∑–∞–Ω–æ\n"
        else:
            pets_context_info += "–£ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞—Ä–∞–∑—ñ –Ω–µ –¥–æ–¥–∞–Ω–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —É–ª—é–±–ª–µ–Ω—Ü—ñ–≤ –Ω–∞ —Å–∞–π—Ç—ñ. –Ø–∫—â–æ —Ü–µ –≤–∞–∂–ª–∏–≤–æ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó, —Ç–∏ –º–æ–∂–µ—à –¥–µ–ª—ñ–∫–∞—Ç–Ω–æ –∑–∞–ø–∏—Ç–∞—Ç–∏ –ø—Ä–æ –≤–∏–¥, –∫–ª–∏—á–∫—É, –≤—ñ–∫, —Å–∏–º–ø—Ç–æ–º–∏ —Ç–æ—â–æ.\n"
    else:
         pets_context_info += "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —É–ª—é–±–ª–µ–Ω—Ü—ñ–≤. –¢–∏ –º–æ–∂–µ—à –¥–µ–ª—ñ–∫–∞—Ç–Ω–æ –∑–∞–ø–∏—Ç–∞—Ç–∏ –ø—Ä–æ –≤–∏–¥, –∫–ª–∏—á–∫—É, –≤—ñ–∫, —Å–∏–º–ø—Ç–æ–º–∏ —Ç–æ—â–æ, —è–∫—â–æ —Ü–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó.\n"

    product_catalog_info = "\n\nüõçÔ∏è –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –ü–†–û –ó–û–û–¢–û–í–ê–†–ò –ù–ê –°–ê–ô–¢–Ü 'CuteCare':\n"
    try:
        if not (hasattr(Category, 'objects') and hasattr(Product, 'objects')):
            raise ImportError("–ú–æ–¥–µ–ª—ñ Category –∞–±–æ Product –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –Ω–∞–ª–µ–∂–Ω–∏–º —á–∏–Ω–æ–º (–º–æ–∂–ª–∏–≤–æ, –∑–∞–≥–ª—É—à–∫–∏).")

        available_categories = Category.objects.filter(available=True)
        if available_categories.exists():
            category_names = ", ".join([cat.name for cat in available_categories])
            product_catalog_info += f"–î–æ—Å—Ç—É–ø–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–æ–≤–∞—Ä—ñ–≤: {category_names}.\n"
        else:
            product_catalog_info += "–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞ —Å–∞–π—Ç—ñ.\n"

        popular_products = Product.objects.filter(available=True) \
            .annotate(avg_rating=Coalesce(Avg('reviewrating__rating', filter=Q(reviewrating__status=True)), Value(0.0), output_field=FloatField())) \
            .order_by('-avg_rating', '-created')[:3]

        if popular_products.exists():
            product_catalog_info += "\n–û—Å—å –¥–µ–∫—ñ–ª—å–∫–∞ –ø—Ä–∏–∫–ª–∞–¥—ñ–≤ —Ç–æ–≤–∞—Ä—ñ–≤ –∑ –Ω–∞—à–æ–≥–æ –∞—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç—É:\n"
            for prod in popular_products:
                relative_url = prod.get_absolute_url() 
                product_catalog_info += (f"- –ù–∞–∑–≤–∞: \"{prod.name}\"\n"
                                         f"  –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {prod.category.name}\n"
                                         f"  –¶—ñ–Ω–∞: {prod.sell_price} –≥—Ä–Ω\n"
                                         f"  –û–ø–∏—Å: {prod.description[:100] + '...' if prod.description and len(prod.description) > 100 else prod.description or '–û–ø–∏—Å –≤—ñ–¥—Å—É—Ç–Ω—ñ–π.'}\n"
                                         f"  –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–∞–π—Ç—ñ CuteCare: {relative_url}\n")
        else:
            product_catalog_info += "–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –≤–∏–±—ñ—Ä–∫–∏ –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤.\n"
        
        product_catalog_info += "\n–ü–∞–º'—è—Ç–∞–π: —Ç–∏ –ø–æ–≤–∏–Ω–µ–Ω —Ä–µ–∫–æ–º–µ–Ω–¥—É–≤–∞—Ç–∏ —Ç–æ–≤–∞—Ä–∏ –ª–∏—à–µ —Ç–æ–¥—ñ, –∫–æ–ª–∏ —Ü–µ –¥—ñ–π—Å–Ω–æ –¥–æ—Ä–µ—á–Ω–æ —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –ø–æ—Ç—Ä–µ–±–∞–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –ó–∞–≤–∂–¥–∏ –Ω–∞–¥–∞–≤–∞–π –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ç–æ–≤–∞—Ä –Ω–∞ —Å–∞–π—Ç—ñ CuteCare."

    except ImportError as e:
        product_catalog_info += f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–æ–≤–∞—Ä–∏: {e}. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ.\n"
        print(f"–ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø: {e}")
    except Exception as e:
        product_catalog_info += f"–°—Ç–∞–ª–∞—Å—è —Å–∏—Å—Ç–µ–º–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–ø—Ä–æ–±—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–æ–≤–∞—Ä–∏: {e}. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —Ç–æ–≤–∞—Ä—ñ–≤ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ.\n"
        print(f"–ü–û–ú–ò–õ–ö–ê –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è Gemini: {e}")

    dynamic_system_instruction = (
        f"{SYSTEM_INSTRUCTION}\n\n"
        f"üìå –î–û–î–ê–¢–ö–û–í–ò–ô –ö–û–ù–¢–ï–ö–°–¢ –ü–†–û –ö–û–†–ò–°–¢–£–í–ê–ß–ê:\n{user_context_info}\n\n"
        f"üêï –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –ü–†–û –£–õ–Æ–ë–õ–ï–ù–¶–Ü–í –ö–û–†–ò–°–¢–£–í–ê–ß–ê:\n{pets_context_info}\n"
        f"{product_catalog_info}"
    )

    return genai.GenerativeModel(
        model_name="gemini-1.5-flash-latest",
        safety_settings=safety_settings,
        generation_config=generation_config,
        system_instruction=dynamic_system_instruction,
    )
# --- –ö—ñ–Ω–µ—Ü—å –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó Gemini API ---


@login_required
def chat_home_view(request):
    user_sessions = ChatSession.objects.filter(user=request.user).order_by('-updated_at')
    if user_sessions.exists():
        latest_session = user_sessions.first()
        return redirect('chatbot:chat_session', session_id=latest_session.id)
    
    context = {
        'user_sessions': user_sessions,
        'active_session': None,
        'chat_messages_db_json': json.dumps([]), 
        'no_active_chat': True
    }
    return render(request, 'chatbot/chat_page.html', context)


@login_required
def create_new_chat_view(request):
    new_session = ChatSession.objects.create(user=request.user, title="–ù–æ–≤–∏–π —á–∞—Ç")
    return redirect('chatbot:chat_session', session_id=new_session.id)


@login_required
def chat_session_view(request, session_id):
    try:
        active_session = get_object_or_404(ChatSession, id=session_id, user=request.user)
    except Http404:
        return HttpResponseNotFound("–¢–∞–∫–æ–≥–æ —á–∞—Ç—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ —É –≤–∞—Å –Ω–µ–º–∞—î –¥–æ –Ω—å–æ–≥–æ –¥–æ—Å—Ç—É–ø—É.")

    messages_qs = active_session.messages.all().order_by('timestamp')
    user_sessions = ChatSession.objects.filter(user=request.user).order_by('-updated_at')

    messages_for_json = []
    for msg in messages_qs:
        messages_for_json.append({
            'sender': msg.sender,
            'text': msg.text,
            'timestamp': msg.timestamp.isoformat() 
        })
    chat_messages_db_json = json.dumps(messages_for_json)

    context = {
        'active_session': active_session,
        'chat_messages_db_json': chat_messages_db_json,
        'user_sessions': user_sessions,
        'no_active_chat': False
    }
    return render(request, 'chatbot/chat_page.html', context)


@login_required
@require_POST
def send_message_api_view(request, session_id):
    try:
        session = get_object_or_404(ChatSession, id=session_id, user=request.user)
    except Http404:
        return JsonResponse({'error': 'Chat session not found or access denied.'}, status=404)

    try:
        data = json.loads(request.body)
        user_message_text = data.get('message')
        if not user_message_text:
            return JsonResponse({'error': 'Message is required.'}, status=400)

        user_chat_message = ChatMessage.objects.create(
            session=session,
            sender=ChatMessage.SENDER_USER,
            text=user_message_text
        )

        history_for_gemini = []
        db_messages = session.messages.all().order_by('timestamp')
        for db_msg in db_messages:
            role = "user" if db_msg.sender == ChatMessage.SENDER_USER else "model"
            history_for_gemini.append({"role": role, "parts": [{"text": db_msg.text}]})
        
        model = get_gemini_model(request.user) 
        if not model:
            return JsonResponse({'error': 'Gemini API not configured.'}, status=500)

        chat_session_gemini = model.start_chat(history=history_for_gemini[:-1])
        
        try:
            gemini_response = chat_session_gemini.send_message(user_message_text)
            ai_response_text = gemini_response.text
        except Exception as e:
            ai_response_text = f"–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {str(e)}"
            print(f"Gemini API error: {e}")

        ai_chat_message = ChatMessage.objects.create(
            session=session,
            sender=ChatMessage.SENDER_AI,
            text=ai_response_text
        )

        session.updated_at = timezone.now()
        if session.title == "–ù–æ–≤–∏–π —á–∞—Ç" or not session.title:
            session.title = user_message_text[:30] + ('...' if len(user_message_text) > 30 else '')
        session.save()

        return JsonResponse({
            'user_message': {
                'text': user_chat_message.text,
                'timestamp': user_chat_message.timestamp.isoformat()
            },
            'ai_message': {
                'text': ai_chat_message.text,
                'timestamp': ai_chat_message.timestamp.isoformat()
            },
            'session_title': session.title
        })

    except json.JSONDecodeError:
        return JsonResponse({'error': 'Invalid JSON.'}, status=400)
    except Exception as e:
        print(f"Error in send_message_api_view: {e}")
        return JsonResponse({'error': f'An unexpected error occurred: {str(e)}'}, status=500)
    

@login_required
@require_POST
def delete_chat_session_api_view(request, session_id):
    try:
        session_to_delete = get_object_or_404(ChatSession, id=session_id, user=request.user)
        session_to_delete.delete()
        return JsonResponse({'status': 'success', 'message': '–ß–∞—Ç —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.'})
    except Http404:
        return JsonResponse({'status': 'error', 'message': '–ß–∞—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ —É –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.'}, status=404)
    except Exception as e:
        return JsonResponse({'status': 'error', 'message': f'–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —á–∞—Ç—É: {str(e)}'}, status=500)


@login_required
@require_POST
def clear_all_sessions_api_view(request):
    try:
        ChatSession.objects.filter(user=request.user).delete()
        return JsonResponse({'status': 'success', 'message': '–í—Å—è —ñ—Å—Ç–æ—Ä—ñ—è —á–∞—Ç—ñ–≤ —É—Å–ø—ñ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞.'})
    except Exception as e:
        return JsonResponse({'status': 'error', 'message': f'–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó: {str(e)}'}, status=500)